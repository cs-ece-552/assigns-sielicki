          // CS552 2008 student tests
          // Original Authors: Henry Duwe, Paul Bemis
          
          // "Final" test
          // Test every instruction along with some specifically designed branches
          // Use only a few registers to make sure the forwarding works
          // Then make sure the rest of the registers work
          
          
          			//					pc in hex
0000      .start:
0000 c0f6 LBI r0, -10		//					pc = 0
0002 c1ff LBI r1, -1		//					pc = 2
0004 c232 LBI r2, 50		//					pc = 4
          
0006      .loop:
0006 d820 ADD r0, r0, r1		//subtract one to loop counter		pc = 6
0008 4802 ADDI r0, r0, 2		//add two from loop counter		pc = 8
000a 8200 ST r0, r2, 0		//store r0 in address r2		pc = a
000c 8a60 LD r3, r2, 0		//retrieve value in new reg to test	pc = c
          			//branch after load on which it is
          			//dependent
000e 73f6 BLTZ r3, .loop		//test branch after load		pc = e
          
0010 7364 BLTZ r3, .error		//make sure doesn't branch		pc = 10
          
          			//test some ALU ops
          SUBI r2, r2, 55		//subtract 50 from 55 (decimal)		pc = 12
0014 5a4a XORI r2, r2, 10		//test foward, r2 should get f		pc = 14
          			//from 5 xor a
0016 5245 ANDNI r2, r2, 5		//r2 should get a			pc = 16
0018 a244 ROLI r2, r2, 4		//r2 should get 0xa0			pc = 18
001a b242 RORI r2, r2, 2		//r2 should get 0x28			pc = 1a
001c aa41 SLLI r2, r2, 1		//r2 should get 0x50			pc = 1c
001e ba43 SRLI r2, r2, 3		//r2 should get 0x0a			pc = 1e
0020 ca08 BTR r2, r2		//r2 should get 0x5000			pc = 20
          
          
0022 c00c LBI r0, 12
0024 c101 LBI r1, 1
0026 c234 LBI r2, 52		
          
0028      .loop2:
0028 d901 SUB r0, r1, r0		//decrement loop counter		pc = 22
002a 9a08 STU r0, r2, 8		//store and update			pc = 24
002c 8a60 LD r3, r2, 0		//offset of 0 to retrieve value		pc = 26
002e 7bf8 BGEZ r3, .loop2		//loop until r3 = 0			pc = 28
          //fall through
          
0030 c30a LBI r3, 10		//test some ALU ops			pc = 2c
0032 c40a LBI r4, 10		//					pc = 2e		
0034 db8e XOR r3, r3, r4		//r3 should get 0			pc = 30
0036 c407 LBI r4, 7		//					pc = 32
0038 9407 SLBI r4, 7		//r4 now has 0x0707			pc = 34
          
003a c30a LBI r3, 10		//					pc = 36
003c dc73 ANDN r4, r4, r3		//r4 has 0x0705				pc = 38
003e c304 LBI r3, 4		//test forward, use r3 in next inst	pc = 3a
0040 d470 ROL r4, r4, r3		//r4 has 0x7050				pc = 3c
0042 c505 LBI r5, 5		//use r5 in next inst			pc = 3e
0044 d472 ROR r4, r4, r3		//r4 has 0x0382				pc = 40
0046 c302 LBI r3, 2		//					pc = 42
0048 d471 SLL r4, r4, r3		//r4 has 0x0e08				pc = 44
004a c508 LBI r5, 8		//					pc = 46
004c d4b3 SRL r4, r4, r5		//r4 has 0x000e				pc = 48
          
          
004e c008 LBI r0, 8		//					pc = 4a
0050 c101 LBI r1, 1		//					pc = 4c
0052 c200 LBI r2, 0		//					pc = 4e
0054 c300 LBI r3, 0		//					pc = 50
          
0056      .loop3:
0056 d901 SUB r0, r1, r0		//decrement loop counter		pc = 52
0058 e04c SEQ r3, r0, r2		//if r0 = r2, set r3			pc = 54
005a 6302 BNEZ r3, .endloop3	//if r3 isn't 0, leave loop		pc = 56
005c 27f8 j .loop3		//					pc = 58
          
005e      .endloop3:
          //check to make sure other regs work, check other set ops
005e c680 LBI r6, 128 		//load 0xffff into reg			pc = 5a
0060 9600 SLBI r6, 0		//					pc = 5c
0062 c780 LBI r7, 128		//test carry out			pc = 5e
0064 9700 SLBI r7, 0		//					pc = 60
0066 fee0 SCO r0, r6, r7		//r0 should get 1			pc = 62
          
0068 c716 LBI r7, 22		//					pc = 64
006a c60a LBI r6, 10		//					pc = 66
006c eee4 SLT r1, r6, r7		//r1 gets 1				pc = 68
006e c616 LBI r6, 22		//					pc = 6a
0070 f6e8 SLE r2, r6, r7		//r2 gets 1				pc = 6c
          
          //jumps have been tested extensively elsewhere, leave them alone
          
0072 c000 LBI r0, 0		//					pc = 6e
0074 6804 BEQZ r0, .exit		//test forwarding			pc = 70
          
          //should not fall through here
          
0076      .error:
0076 c206 LBI r2, 6		//this should never execute		pc = 72
0078 0000 HALT			//this should never execute		pc = 74
          
          
007a      .exit:
007a c000 LBI r0, 0		//					pc = 76
007c 0000 HALT			//					pc = 78
