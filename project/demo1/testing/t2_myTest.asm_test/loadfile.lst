          // CS552 2008 student tests
          // Original Authors: Matt Sinclair, Amy Zou, Ju shin Lee
          
          // CS/ECE 552 Spring '08
          // Author: Matt Sinclair
          // <TeamName></TeamName>
          // This assembly file uses all the instructions currently implemented in our ISA
          // (all but RTI, SIIC, etc. - everything for the unpipelined processor)
          	
0000 201a J	.startHere
0002 c001 LBI	r0, 1			// none of these should execute
0004 c101 LBI	r1, 1
0006 c201 LBI	r2, 1
0008 c301 LBI	r3, 1
000a c401 LBI	r4, 1
000c c501 LBI	r5, 1
000e c601 LBI	r6, 1
0010 c701 LBI	r7, 1
0012 0800 NOP
0014 0800 NOP
0016      .Death:		
0016 0000 HALT
0018 0000 HALT
001a 0000 HALT	
          
          // start executing here
001c      .startHere:		
001c c000 LBI	r0, 0			// initialize all registers to have value 0
001e c100 LBI	r1, 0
0020 c200 LBI	r2, 0
0022 c300 LBI	r3, 0
0024 c400 LBI	r4, 0
0026 c500 LBI	r5, 0
0028 c600 LBI	r6, 0
002a c700 LBI	r7, 0	
002c 0800 NOP
002e 0800 NOP
0030 0800 NOP
          
          // immediate tests
0032 493f ADDI	r1, r1, 31		// r1 = 0xFFFF
0034 4143 SUBI	r2, r1, 3		// r2 = 0x0002
0036 596f XORI	r3, r1, 15		// r3 = 0xFFF0
0038 518a ANDNI	r4, r1, 10		// r4 = 0xFFF5
003a a481 ROLI	r4, r4, 1		// r4 = 0xFFEB
003c ab6b SLLI	r3, r3, 11		// r3 = 0x8000
003e b24e RORI	r2, r2, 14		// r2 = 0x000c
0040 b925 SRLI	r1, r1, 5		// r1 = 0x07FF
          
          // loads and stores
0042 8220 ST	r1, r2, 0		// store 0x07FF @ address 2 (hopefully)
0044 8aa0 LD	r5, r2, 0		// load 0x07FF into r5 from addresss 2 (hopefully)
0046 9a82 STU	r4, r2, 2		// store 0xFFF5 @ address 4 (hopefully)
          				// r2 = r2 + 0x3 = 0x0004
          
          // other ALU operations - non-immediates	
0048 c918 BTR	r6, r1			// r1 = 0xFFE0
004a ca08 BTR	r2, r2			// r2 = 0xF000
004c da64 ADD	r1, r2, r3		// r3 = 0x7000
004e d925 SUB	r1, r1, r1		// r1 = 0x0000
0050 db86 XOR	r1, r3, r4		// r4 = 0x7FEB
0052 db8b ANDN	r2, r3, r4		// r2 = 0x0000
0054 d288 ROL	r2, r2, r4		// r2 = 0x0000
0056 d289 SLL	r2, r2, r4		// r2 = 0x0000
0058 d28a ROR	r2, r2, r4		// r2 = 0x0000
005a d28b SRL	r2, r2, r4		// r2 = 0x0000
005c 4a20 ADDI	r1, r2, 0
005e e158 SEQ	r6, r1, r2		// r6 = 0x0001
0060 ea94 SLT	r5, r2, r4		// r5 = 0x0000
0062 f190 SLE	r4, r1, r4		// r4 = 0x0000
0064 fb4c SCO	r3, r3, r2		// r3 = 0x0000
          
0066 c105 LBI	r1, 5	
0068      .Loop1:	
0068 6904 BEQZ	r1, .exitLoop1
006a 493f ADDI	r1, r1, -1
006c 27fa J	.Loop1
          
006e      .exitLoop1:
006e      .Loop2:
006e 4921 ADDI	r1, r1, 1	
0070 6106 BNEZ	r1, .exitLoop2
0072 0800 NOP
0074 0800 NOP
0076 0000 HALT
          
0078      .exitLoop2:
0078      .Loop3:	
0078 7104 BLTZ	r1, .exitLoop3
007a 493f ADDI	r1, r1, -1
007c 2f78 JR	r7, .Loop3
          
007e      .exitLoop3:
007e      .Loop4:
007e 7904 BGEZ	r1, .exitLoop4
0080 4921 ADDI	r1, r1, 1
0082 27fa J	.Loop4
          
0084      .exitLoop4:
0084 c100 LBI	r1, 0
0086 921f SLBI	r2, 31			// r2 = 0x001F
0088 300c JAL	.bigFinish
008a 0800 NOP
008c 0800 NOP
008e 0800 NOP
0090 0800 NOP	
0092 0000 HALT
0094 0000 HALT
          
0096      .bigFinish:
0096 0800 NOP
0098 0800 NOP
009a 0000 HALT
