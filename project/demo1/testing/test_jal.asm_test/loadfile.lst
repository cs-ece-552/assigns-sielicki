0000 c101 lbi r1, 1               //set r1 to 1. It will be used to indicate if the execution result is correct or not
0002 c200 lbi r2, U.Label2        //set r2 to the address of Label2, which is used for jalr
0004 921a slbi r2, L.Label2       
          
0006 3008 jal .Label1             //jump to the label1 and save the address of next instruction to r7
0008 4922 addi r1, r1, 2          //add r1 by 2, if the above jump return to correct address. It means jr can work and address in r7 is correct
          
000a 3a00 jalr r2, 0              //jump to the address the r2 indicate, and save the address of the next instruction to r7
000c 4928 addi r1, r1, 8          //add r1 by 8, if the above jump return to correct address, It means jr can work and address in r7 is correct
000e 0000 halt
          
0010      .Label1:                
0010 4921 addi r1, r1, 1          //add r1 by 1, if the program jump to here. it means the jal can work.
0012 2f00 jr r7, 0                //jump back
0014 3a00 jalr r2, 0              //if above jr cannot work, we still want to test jalr.
0016 4928 addi r1, r1, 8         
0018 0000 halt
          
001a      .Label2:
001a 4924 addi r1, r1, 4          //add r1 by 4, if the program jump to here. it means the jalr can work.
001c 2f00 jr r7, 0                //jump back
001e 0000 halt
          // possible bug:
          // The program work correctly: r1=16
          // jal and jalr cannot work: r1=9
          // only jr in Label1 cannot work: r1=14
          // only jr in label2 cannot work: r1=8
          // only jal cannot work: r1=15
          // only jalr cannot work: r1=12
          // jr in Label1 and jr in label2 cannot work: r1=6
