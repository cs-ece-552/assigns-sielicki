          //A basic program that stores that first 50 numbers of the fibonacci sequence;
          //it then uses these numbers to create a "backward' fibonacci sequence by subtracting
          //each larger number from it's predecessor, and stores this sequence in memory.
          //--------------------
          //This program mostly tests cache performance: instruction fetches should be hits
          //inside the loop - all loads from the second loop should also be hits.  Test also
          //tests processors ability to loop with jal, and uses a heavy amount of adds and subs.
          
          
          
0000 c014 lbi r0, 20		//r0 holds amount of numbers left to be stored
0002 c164 lbi r1, 100 		//r1 holds address for the next number to be stored
0004 c201 lbi r2, 1		//r2 is primer 
0006 c301 lbi r3, 1		//r3 is primer
0008 8140 st r2, r1, 0		//store first number as primer
000a 4922 addi r1, r1, 2
000c 481f addi r0, r0, -1
000e 8160 st r3, r1, 0		//store second number as primer
0010 481f addi r0, r0, -1
          
0012 300c jal .CalcFib		//store away first set of fibonacci numbers
          
0014 c014 lbi r0, 20		//ro holds amount of numbers left to be stored
0016 c2c8 lbi r2, 200 		//r2 holds address to store next "backward" fib number
          
0018 3016 jal .CalcRevFib		// store away backwards set of fibonacci nums
          
001a 0000 halt
001c 0000 halt
001e 0000 halt
          
0020      .CalcFib:
0020 da70 add r4, r2, r3		//get next number of sequence
0022 4922 addi r1, r1, 2		//get address to store next number
0024 8180 st r4, r1, 0		//store number
0026 481f addi r0, r0, -1
0028 4b40 addi r2, r3, 0		//eliminates oldest number to make room for new addition
002a 4c60 addi r3, r4, 0		//makes result an operand
002c 60f2 bnez r0, .CalcFib	//if numbers left to be stored is zero, exit loop
002e 2f00 jr r7, 0
          
          
0030      .CalcRevFib:
0030 8960 ld r3, r1, 0		//load the last value in fib sequence, starting from the top
0032 8260 st r3, r2, 0		//put the value in the beginning of our reverse fib sequence
0034 493e addi r1, r1, -2		//reassign pointers
0036 4a42 addi r2, r2, 2
0038 481f addi r0, r0, -1
003a 60f4 bnez r0, .CalcRevFib	//loop if not done
003c 2f00 jr r7, 0
          
          
          
