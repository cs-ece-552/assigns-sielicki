/* Generated by Yosys 0.8 (git sha1 b4e5e37, clang 8.0.1 -fPIC -Os) */

module control(err, RegDst, SESel, RegWrite, DMemWrite, DMemEn, ALUSrc2, PCSrc, PCImm, MemToReg, DMemDump, Jump, illegalOp, rti, OpCode, Funct);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  output ALUSrc2;
  output DMemDump;
  output DMemEn;
  output DMemWrite;
  input [1:0] Funct;
  output Jump;
  output MemToReg;
  input [4:0] OpCode;
  output PCImm;
  output PCSrc;
  output [1:0] RegDst;
  output RegWrite;
  output [2:0] SESel;
  wire \alusrc2.funct[0] ;
  wire \alusrc2.funct[1] ;
  wire \alusrc2.funct[2] ;
  wire \alusrc2.funct[3] ;
  wire \alusrc2.funct[4] ;
  wire \alusrc2.funct[5] ;
  wire \dmemen.funct[0] ;
  wire \dmemen.funct[2] ;
  output err;
  output illegalOp;
  wire \jump.funct[0] ;
  wire \jump.funct[1] ;
  wire \pcimm.funct[0] ;
  wire \pcimm.funct[1] ;
  wire \pcsrc.funct[0] ;
  wire \pcsrc.funct[1] ;
  wire \pcsrc.funct[2] ;
  wire \pcsrc.funct[3] ;
  wire \regdst.finalOneOne ;
  wire \regdst.finalOneZero ;
  wire \regdst.finalZeroOne ;
  wire \regdst.finalZeroZero ;
  wire \regdst.mux00[0] ;
  wire \regdst.mux01[0] ;
  wire \regdst.mux01[1] ;
  wire \regdst.mux10[0] ;
  wire \regdst.mux10[1] ;
  wire \regdst.one_zero0.out ;
  wire \regdst.one_zero1.out ;
  wire \regdst.zero_one0.out ;
  wire \regdst.zero_one1.out ;
  wire \regdst.zero_one2.out ;
  wire \regdst.zero_one3.out ;
  wire \regdst.zero_one4.out ;
  wire \regdst.zero_one5.out ;
  wire \regdst.zero_one8.out ;
  wire \regdst.zero_one9.out ;
  wire \regdst.zero_zero0.out ;
  output rti;
  wire \sesel.final000 ;
  wire \sesel.final01x ;
  wire \sesel.final10x ;
  wire \sesel.mux000[0] ;
  wire \sesel.mux001[0] ;
  wire \sesel.mux001[1] ;
  wire \sesel.mux01x[0] ;
  wire \sesel.mux01x[1] ;
  wire \sesel.mux01x[2] ;
  wire \sesel.mux10x[0] ;
  wire \sesel.mux10x[1] ;
  wire \sesel.mux10x[2] ;
  assign _004_ = ~(OpCode[1] ^ OpCode[0]);
  assign _000_ = OpCode[4] ^ OpCode[2];
  assign _001_ = ~(_004_ ^ _000_);
  assign _002_ = ~(Funct[1] ^ Funct[0]);
  assign _003_ = ~(OpCode[3] ^ _002_);
  assign err = ~(_001_ ^ _003_);
  assign _005_ = ~(OpCode[2] ^ 1'h0);
  assign _006_ = ~(OpCode[4] ^ 1'h0);
  assign _007_ = _005_ & _006_;
  assign _008_ = ~(OpCode[3] ^ 1'h0);
  assign _009_ = 1'h1 | ~(OpCode[1]);
  assign _010_ = 1'h0 | ~(OpCode[0]);
  assign _011_ = OpCode[0] | ~(1'h0);
  assign _012_ = OpCode[1] | ~(1'h1);
  assign _013_ = _009_ & _011_;
  assign _014_ = _010_ & _012_;
  assign _015_ = _008_ & _014_;
  assign _016_ = _007_ & _015_;
  assign illegalOp = _013_ & _016_;
  assign _019_ = ~(\alusrc2.funct[0]  | \alusrc2.funct[1] );
  assign _020_ = ~(\alusrc2.funct[2]  | \alusrc2.funct[3] );
  assign _017_ = ~(\alusrc2.funct[4]  | \alusrc2.funct[5] );
  assign _018_ = _020_ & _017_;
  assign ALUSrc2 = ~(_019_ & _018_);
  assign _021_ = ~(OpCode[4] ^ 1'h1);
  assign _022_ = _005_ & _021_;
  assign _023_ = ~(OpCode[3] ^ 1'h1);
  assign _024_ = 1'h1 | ~(OpCode[0]);
  assign _025_ = OpCode[0] | ~(1'h1);
  assign _026_ = _009_ & _025_;
  assign _027_ = _024_ & _012_;
  assign _028_ = _023_ & _027_;
  assign _029_ = _022_ & _028_;
  assign \alusrc2.funct[0]  = _026_ & _029_;
  assign _030_ = _023_ & _014_;
  assign _031_ = _022_ & _030_;
  assign \alusrc2.funct[1]  = _013_ & _031_;
  assign _032_ = ~(OpCode[2] ^ 1'h1);
  assign _033_ = _032_ & _021_;
  assign _034_ = 1'h0 | ~(OpCode[1]);
  assign _035_ = OpCode[1] | ~(1'h0);
  assign _036_ = _034_ & _011_;
  assign _037_ = _010_ & _035_;
  assign _038_ = _023_ & _037_;
  assign _039_ = _033_ & _038_;
  assign \alusrc2.funct[2]  = _036_ & _039_;
  assign _040_ = _034_ & _025_;
  assign _041_ = _024_ & _035_;
  assign _042_ = _023_ & _041_;
  assign _043_ = _033_ & _042_;
  assign \alusrc2.funct[3]  = _040_ & _043_;
  assign _044_ = _033_ & _030_;
  assign \alusrc2.funct[4]  = _013_ & _044_;
  assign _045_ = _033_ & _028_;
  assign \alusrc2.funct[5]  = _026_ & _045_;
  assign _046_ = _008_ & _037_;
  assign _047_ = _007_ & _046_;
  assign DMemDump = _036_ & _047_;
  assign _048_ = \dmemen.funct[0]  | MemToReg;
  assign DMemEn = \dmemen.funct[2]  | _048_;
  assign _049_ = _022_ & _046_;
  assign \dmemen.funct[0]  = _036_ & _049_;
  assign _050_ = _008_ & _041_;
  assign _051_ = _022_ & _050_;
  assign MemToReg = _040_ & _051_;
  assign _052_ = _008_ & _027_;
  assign _053_ = _022_ & _052_;
  assign \dmemen.funct[2]  = _026_ & _053_;
  assign DMemWrite = \dmemen.funct[0]  | \dmemen.funct[2] ;
  assign Jump = \jump.funct[0]  | \jump.funct[1] ;
  assign _054_ = _032_ & _006_;
  assign _055_ = _054_ & _050_;
  assign \jump.funct[0]  = _040_ & _055_;
  assign _056_ = _054_ & _052_;
  assign \jump.funct[1]  = _026_ & _056_;
  assign PCImm = \pcimm.funct[0]  | \pcimm.funct[1] ;
  assign _057_ = _054_ & _046_;
  assign \pcimm.funct[0]  = _036_ & _057_;
  assign _058_ = _054_ & _015_;
  assign \pcimm.funct[1]  = _013_ & _058_;
  assign _059_ = ~(\pcimm.funct[0]  | \jump.funct[0] );
  assign _060_ = ~(\pcimm.funct[1]  | \jump.funct[1] );
  assign _061_ = _059_ & _060_;
  assign _062_ = ~(\pcsrc.funct[0]  | \pcsrc.funct[1] );
  assign _063_ = ~(\pcsrc.funct[2]  | \pcsrc.funct[3] );
  assign _064_ = _062_ & _063_;
  assign PCSrc = ~(_061_ & _064_);
  assign _065_ = _054_ & _038_;
  assign \pcsrc.funct[0]  = _036_ & _065_;
  assign _066_ = _054_ & _042_;
  assign \pcsrc.funct[1]  = _040_ & _066_;
  assign _067_ = _054_ & _030_;
  assign \pcsrc.funct[2]  = _013_ & _067_;
  assign _068_ = _054_ & _028_;
  assign \pcsrc.funct[3]  = _026_ & _068_;
  assign _069_ = ~(\regdst.zero_zero0.out  | \alusrc2.funct[2] );
  assign _070_ = ~(\alusrc2.funct[1]  | \alusrc2.funct[3] );
  assign _071_ = _070_ & ~(\alusrc2.funct[5] );
  assign _072_ = ~(\alusrc2.funct[0]  | \alusrc2.funct[4] );
  assign _073_ = _069_ & _072_;
  assign \regdst.finalZeroZero  = ~(_071_ & _073_);
  assign _074_ = ~(\dmemen.funct[0]  | MemToReg);
  assign _075_ = ~(\regdst.zero_one8.out  | \regdst.zero_one9.out );
  assign _076_ = _074_ & _075_;
  assign _077_ = ~(\regdst.zero_one0.out  | \regdst.zero_one1.out );
  assign _078_ = ~(\regdst.zero_one3.out  | \regdst.zero_one4.out );
  assign _079_ = ~(\regdst.zero_one2.out  | \regdst.zero_one5.out );
  assign _080_ = _077_ & _079_;
  assign _081_ = _076_ & _080_;
  assign \regdst.finalZeroOne  = ~(_078_ & _081_);
  assign _082_ = \regdst.one_zero0.out  | \regdst.one_zero1.out ;
  assign \regdst.finalOneZero  = \dmemen.funct[2]  | _082_;
  assign \regdst.finalOneOne  = \pcimm.funct[1]  | \jump.funct[1] ;
  assign RegDst[0] = \regdst.finalOneOne  ? 1'h1 : \regdst.mux10[0] ;
  assign RegDst[1] = \regdst.finalOneOne  ? 1'h1 : \regdst.mux10[1] ;
  assign \regdst.mux10[0]  = \regdst.finalOneZero  ? 1'h0 : \regdst.mux01[0] ;
  assign \regdst.mux10[1]  = \regdst.finalOneZero  ? 1'h1 : \regdst.mux01[1] ;
  assign \regdst.mux01[0]  = \regdst.finalZeroOne  ? 1'h1 : \regdst.mux00[0] ;
  assign \regdst.mux01[1]  = \regdst.finalZeroOne  ? 1'h0 : \regdst.mux00[0] ;
  assign \regdst.mux00[0]  = \regdst.finalZeroZero  ? 1'h0 : 1'h0;
  assign _083_ = _022_ & _038_;
  assign \regdst.one_zero0.out  = _036_ & _083_;
  assign _084_ = _022_ & _015_;
  assign \regdst.one_zero1.out  = _013_ & _084_;
  assign _085_ = _007_ & _042_;
  assign \regdst.zero_one0.out  = _040_ & _085_;
  assign _086_ = _007_ & _030_;
  assign \regdst.zero_one1.out  = _013_ & _086_;
  assign _087_ = _007_ & _028_;
  assign \regdst.zero_one2.out  = _026_ & _087_;
  assign _088_ = _033_ & _050_;
  assign \regdst.zero_one3.out  = _040_ & _088_;
  assign _089_ = _033_ & _015_;
  assign \regdst.zero_one4.out  = _013_ & _089_;
  assign _090_ = _033_ & _052_;
  assign \regdst.zero_one5.out  = _026_ & _090_;
  assign _091_ = _033_ & _046_;
  assign \regdst.zero_one8.out  = _036_ & _091_;
  assign _092_ = _007_ & _038_;
  assign \regdst.zero_one9.out  = _036_ & _092_;
  assign _093_ = _022_ & _042_;
  assign \regdst.zero_zero0.out  = _040_ & _093_;
  assign _097_ = _095_ & _096_;
  assign _098_ = _094_ & _097_;
  assign _099_ = ~(\regdst.zero_zero0.out  | \alusrc2.funct[0] );
  assign _100_ = ~(\alusrc2.funct[1]  | \alusrc2.funct[2] );
  assign _101_ = _099_ & _100_;
  assign _103_ = ~(MemToReg | \dmemen.funct[2] );
  assign _104_ = _102_ & _103_;
  assign _105_ = _101_ & _104_;
  assign _106_ = ~(\regdst.one_zero1.out  | \pcimm.funct[1] );
  assign _107_ = _106_ & ~(\jump.funct[1] );
  assign _108_ = ~(\alusrc2.funct[3]  | \alusrc2.funct[4] );
  assign _109_ = ~(\alusrc2.funct[5]  | \regdst.one_zero0.out );
  assign _110_ = _108_ & _109_;
  assign _111_ = _107_ & _110_;
  assign _112_ = _105_ & _111_;
  assign RegWrite = ~(_098_ & _112_);
  assign _113_ = _007_ & _052_;
  assign rti = _026_ & _113_;
  assign _095_ = ~(\regdst.zero_one1.out  | \regdst.zero_one2.out );
  assign _096_ = ~(\regdst.zero_one8.out  | \regdst.zero_one3.out );
  assign _102_ = ~(\regdst.zero_one4.out  | \regdst.zero_one5.out );
  assign _114_ = _096_ & _102_;
  assign \sesel.final000  = ~(_095_ & _114_);
  assign _094_ = ~(\regdst.zero_one9.out  | \regdst.zero_one0.out );
  assign _115_ = _074_ & ~(\dmemen.funct[2] );
  assign \sesel.final01x  = ~(_094_ & _115_);
  assign _116_ = ~(\pcsrc.funct[0]  | \pcsrc.funct[3] );
  assign _117_ = ~(\pcsrc.funct[2]  | \regdst.one_zero0.out );
  assign _118_ = _117_ & ~(\jump.funct[1] );
  assign _119_ = ~(\pcsrc.funct[1]  | \jump.funct[0] );
  assign _120_ = _116_ & _119_;
  assign \sesel.final10x  = ~(_118_ & _120_);
  assign SESel[0] = PCImm ? 1'h0 : \sesel.mux10x[0] ;
  assign SESel[1] = PCImm ? 1'h1 : \sesel.mux10x[1] ;
  assign SESel[2] = PCImm ? 1'h1 : \sesel.mux10x[2] ;
  assign \sesel.mux10x[0]  = \sesel.final10x  ? 1'h0 : \sesel.mux01x[0] ;
  assign \sesel.mux10x[1]  = \sesel.final10x  ? 1'h0 : \sesel.mux01x[1] ;
  assign \sesel.mux10x[2]  = \sesel.final10x  ? 1'h1 : \sesel.mux01x[2] ;
  assign \sesel.mux01x[0]  = \sesel.final01x  ? 1'h0 : \sesel.mux001[0] ;
  assign \sesel.mux01x[1]  = \sesel.final01x  ? 1'h1 : \sesel.mux001[1] ;
  assign \sesel.mux01x[2]  = \sesel.final01x  ? 1'h0 : \sesel.mux001[1] ;
  assign \sesel.mux001[0]  = \regdst.one_zero1.out  ? 1'h1 : \sesel.mux000[0] ;
  assign \sesel.mux001[1]  = \regdst.one_zero1.out  ? 1'h0 : \sesel.mux000[0] ;
  assign \sesel.mux000[0]  = \sesel.final000  ? 1'h0 : 1'h0;
endmodule
