==> ./sle_1.asm_attest/sle_1.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xffff
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0xffff
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rd with two equal negative operands    : (rs == rt) where ((rs,rt) < 0)
//  Expected: r3 == 1, (r1,r2) == -1

==> ./sle_10.asm_attest/sle_10.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xfffc
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0xfff8
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0000
INUM:        3 PC: 0x0006
// Should not set rt with two negative operands          : (rs > rt)  where (rs != rt, (rs, rt) < 0)
//  Expected: r3 == 0, r1 == -4, r2 == -8

==> ./sle_11.asm_attest/sle_11.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0004
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0xfffc
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0000
INUM:        3 PC: 0x0006
// Should not set rt with opposite sign operands         : (rt < rs)  where (rs < 0, 0 < rt)
//  Expected: r3 == 0, r1 == 4, r2 == -4

==> ./sle_12.asm_attest/sle_12.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0004
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0000
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0000
INUM:        3 PC: 0x0006
// Should not set rt with with signed operand and zero   : (rt > rs)  where (rt == 0, 0 < rs)
//  Expected: r3 == 0, r1 == 4, r2 == 0

==> ./sle_13.asm_attest/sle_13.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xfffc
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0000
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rt with with zero and signed operand   : (rs > rt)  where (rs < 0, 0 == rt)
//  Expected: r3 == 1, r1 == -4, r2 == 0

==> ./sle_2.asm_attest/sle_2.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0001
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0001
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rd with two equal positive operands    : (rs == rt) where ((rs, rt) > 0)
//  Expected: r3 == 1, (r1,r2) == 1

==> ./sle_3.asm_attest/sle_3.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0000
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0000
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rd with two equal operands of zero     : (rs == rt) where ((rs, rt) == 0)
//  Expected: r3 == 1, (r1,r2) == 0

==> ./sle_4.asm_attest/sle_4.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0004
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0008
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rt with two positive nonequal operands : (rs < rt)  where (rs != rt, 0 < (rs, rt))
//  Expected: r3 == 1, r1 == 4, r2 == 8

==> ./sle_5.asm_attest/sle_5.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xfff8
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0xfffc
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rt with two negative operands          : (rs < rt)  where (rs != rt, (rs, rt) < 0)
//  Expected: r3 == 1, r1 == -8, r2 == -4

==> ./sle_6.asm_attest/sle_6.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xfffc
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0004
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rt with opposite sign operands         : (rs < rt)  where (rs < 0, 0 < rt)
//  Expected: r3 == 1, r1 == -4, r2 == 4

==> ./sle_7.asm_attest/sle_7.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0xfffc
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0000
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0001
INUM:        3 PC: 0x0006
// Should set rt with with zero and signed operand   : (rs > rt)  where (rs < 0, 0 == rt)
//  Expected: r3 == 1, r1 == -4, r2 == 0

==> ./sle_8.asm_attest/sle_8.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0004
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0000
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0000
INUM:        3 PC: 0x0006
// Should not set rt with with signed operand and zero   : (rt > rs)  where (rt == 0, 0 < rs)
//  Expected: r3 == 0, r1 == 4, r2 == 0

==> ./sle_9.asm_attest/sle_9.asm_testlog_concat <==
INUM:        0 PC: 0x0000 REG: 1 VALUE: 0x0008
INUM:        1 PC: 0x0002 REG: 2 VALUE: 0x0004
INUM:        2 PC: 0x0004 REG: 3 VALUE: 0x0000
INUM:        3 PC: 0x0006
// Should not set rt with two positive nonequal operands : (rs > rt)  where (rs != rt, 0 < (rs, rt))
//  Expected: r3 == 0, r1 == 8, r2 == 4
